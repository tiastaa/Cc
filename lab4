using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace lab4Yovbak
{
    internal class Program
    {
        static void Main(string[] args)
        {

            var p1 = new TTriangle();
            var p2 = new TTriangle(1, 4 ,5);
            var p3 = new TTriangle(p2);
            Console.WriteLine(p1);
            Console.WriteLine(p2);
            Console.WriteLine(p3);
            Console.WriteLine(TTriangle.count);

            p3.SetValue(5, 6 , 7);
            Console.WriteLine(TTriangle.Square(p3));
            Console.WriteLine(p1);
            Console.WriteLine(TTriangle.Perimeter(p3));

            p1 = 3 * p1 + p2;
            Console.WriteLine(p1);

            Console.ReadLine();
        }


        internal class TTriangle
        {
            public static int count;

            private double a;
            private double b;
            private double c;

            public double A { get { return a; } set { a = value; } }
            public double B { get { return b; } set { b = value; } }
            public double C { get { return c; } set { c = value; } }

            public TTriangle()
            {
                a = 1;
                b = 1;
                c = 1;
                count++;
            }
            public TTriangle(double aa, double bb, double cc)
            {
                a = aa;
                b = bb;
                c = cc;
                count++;
            }
            public TTriangle(TTriangle p)
            {
                a = p.a;
                b = p.b;
                c = p.c;

                count++;
            }
            static TTriangle()
            {
                count = 0;
            }


            public override string ToString()
            {
                return string.Format($"a={a} b={b} c={c}");
            }
            public void SetValue(double aa, double bb, double cc)
            {
                a = aa;
                b = bb;
                c = cc;
            }
  
            public static double Square(TTriangle p)
            {
                double miniperimetp = (p.a + p.b + p.c) / 2;
                return Math.Sqrt(miniperimetp * (miniperimetp - p.a) * (miniperimetp - p.b) * (miniperimetp - p.c));
            }
            public static double Perimeter(TTriangle p)
            {
                return p.a + p.b + p.c;
            }

            public bool IsEqual(TTriangle p)
            { if (a == p.a && b == p.b)
                {
                    if (c == p.c)
                        return true;
                    else
                        return false;
                }
                else 
                    return false;
                    
            }
            public static TTriangle operator +(TTriangle p1, TTriangle p2)
            {
                return new TTriangle(p1.a + p2.a, p1.b + p2.b, p1.c + p2.c);
            }
            public static TTriangle operator -(TTriangle p1, TTriangle p2)
            {
                return new TTriangle(p1.a - p2.a, p1.b - p2.b, p1.c - p2.c);
            }
            public static TTriangle operator *(TTriangle p1, double d)
            {
                return new TTriangle(p1.a * d, p1.b * d, p1.c * d);
            }
            public static TTriangle operator *(double d, TTriangle p1)
            {
                return new TTriangle(p1.a * d, p1.b * d, p1.c * d);
            }

        }

    }
}
